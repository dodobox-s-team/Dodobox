from datetime import datetime, timedelta
from typing import Optional

from pydantic import BaseModel, constr

from api.schemas import db, timetables


class Timetable(BaseModel):
    id: Optional[int]
    action: constr(max_length=16)
    start: datetime
    duration: timedelta
    repeat: timedelta

    @classmethod
    async def add(cls, timetable: 'Timetable') -> 'Timetable':
        """
        Add a timetable to the database.
        The timetable's id auto generated by the database.
        The id is suppressed without warning.
        """
        timetable.start = datetime.utcfromtimestamp(timetable.start.timestamp())
        values = timetable.dict()
        values.pop('id')

        query = timetables.insert().values(**values)
        timetable.id = await db.execute(query)

        return timetable

    @classmethod
    async def get(cls, id: int) -> Optional['Timetable']:
        """Get a timetable from the database from its id."""
        query = timetables.select().where(timetables.c.id == id)
        timetable = await db.fetch_one(query)
        if timetable:
            return Timetable(**timetable)

    @classmethod
    async def get_all(cls) -> list['Timetable']:
        """Return a list of all timetables from the database."""
        return [Timetable(**timetable) for timetable in await db.fetch_all(timetables.select())]

    @classmethod
    async def update(cls, id: int, **kwargs) -> Optional['Timetable']:
        """Update fields of a timetable."""
        query = timetables.update().where(timetables.c.id == id).values(**kwargs).returning(timetables)
        if timetable := await db.fetch_one(query):
            return Timetable(**timetable)

    @classmethod
    async def delete(cls, id: int) -> Optional['Timetable']:
        """Delete a timetable and return it. Return None if the timetable does not exists."""
        query = timetables.delete().where(timetables.c.id == id).returning(timetables)
        timetable = await db.fetch_one(query)

        return timetable

    @classmethod
    async def edit(cls, id: int, timetable: 'Timetable') -> Optional['Timetable']:
        """Edit a timetable in the database."""
        timetable = timetable.dict()
        timetable.pop('id')
        return await cls.update(id, **timetable)
