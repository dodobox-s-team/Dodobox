from typing import Optional

from api.schemas import db, graphs
from pydantic import BaseModel, constr


class Graph(BaseModel):
    id: Optional[int]
    deviceId: Optional[int]
    name: constr(max_length=64)
    axisLabel: constr(max_length=64)

    @classmethod
    async def add(cls, graph: 'Graph') -> 'Graph':
        """
        Add a graph to the database.
        The graph's id is auto generated by the database.
        The id is suppressed without warning.
        """
        values = graph.dict()
        values.pop('id')

        query = graphs.insert().values(**values)
        graph.id = await db.execute(query)

        return graph
    
    @classmethod
    async def get (cls, id: int) -> 'Graph':
        pass
    @classmethod
    async def get_all (cls) -> 'Graph':
        pass
    @classmethod
    async def update (cls, id: int, **kwargs) -> 'Graph':
        pass
    @classmethod
    async def edit (cls, id: int, graph: 'Graph') -> 'Graph':
        pass
    @classmethod
    async def delete (cls, id: int) -> 'Graph':
        pass